A.J. Brown
4 Dec 2023
Here is an example of commands used in iPython via Miniconda terminal to execute the HTTP protocol script for Ubidots data access.
###################################################################

In [1]: import ubidots_python_api_test_HTTP as u

In [2]: %load_ext autoreload

In [3]: %autoreload 2

In [4]: TOKEN = {insert API token here as string}

In [5]: HEADERS = {"X-Auth-Token": TOKEN}

In [6]: dev_df = u.get_all_devices_df(headers=HEADERS)
Making request to https://industrial.api.ubidots.com/api/v2.0/devices/
Headers = ## hidden to protect API key ##
Done.

In [7]: dev_df.columns
Out[7]:
Index(['url', 'id', 'organization', 'label', 'name', 'description', 'tags',
       'properties', 'isActive', 'lastActivity', 'createdAt', 'variables',
       'variablesCount'],
      dtype='object')

In [8]: pt10id = dev_df.loc[dev_df['name'] == 'PT10-4MS']['id'].values[0]

In [9]: dev_vals = u.get_device_data(device_id=pt10id, headers=HEADERS, last_values=5000)

###### Lots of output printed, but returns df with a single device and all variables ######

In [10]: dev_vals.head
Out[10]:
<bound method NDFrame.head of           Timestamp Human readable date (UTC)  avg_tempf  ...     tempf2     tempf1  signal
0     1672870177000       2023-01-04 22:09:37  52.872499  ...  53.037498  52.947498    25.0
1     1672863133000       2023-01-04 20:12:13  53.225000  ...  53.150002  53.599998    37.5
2     1672856089000       2023-01-04 18:14:49  53.847500  ...  53.937500  54.005001    42.5
3     1672849031000       2023-01-04 16:17:11  52.594998  ...  53.037498  52.947498    45.0
4     1672841987000       2023-01-04 14:19:47  49.482499  ...  50.112499  49.639999    30.0
...             ...                       ...        ...  ...        ...        ...     ...
1835  1667003319215       2022-10-29 00:28:39        NaN  ...        NaN        NaN     NaN
1836  1666996275885       2022-10-28 22:31:15        NaN  ...        NaN        NaN     NaN
1837  1666996068594       2022-10-28 22:27:48        NaN  ...        NaN        NaN     NaN
1838  1666989022873       2022-10-28 20:30:22        NaN  ...        NaN        NaN     NaN
1839  1671112800000       2022-12-15 14:00:00        NaN  ...  39.875000  30.627501    25.0

[1840 rows x 11 columns]>

In [11]: dev_type_df = u.get_type_data(device_type = 'pile-temp-and-cercospora-monitor', headers=HEADERS, last_values=5000)

In [12]: dev_type_df.columns
Out[12]:
Index(['Timestamp', 'Human readable date (UTC)', 'avg_tempf', 'Context',
       'position', 'charge', 'battery', 'tempf3', 'tempf2', 'tempf1', 'signal',
       'name', 'new-variable'],
      dtype='object')

In [13]: dev_type_df.name.unique()
Out[13]:
array(['PT10-4MS', 'PT12-LW7', 'PT11-W6K', 'PT14-8BY', 'PT13-UMC-BK',
       'PT13-26H', 'PT12-WLG', 'PT11-SPF', 'PT7-GU5', 'PT9-M8U',
       'PT8-BX9', 'PT6-NF5', 'PT3-ATR', 'PT2-JWL', 'PT4-CT3', 'PT5-KGM',
       'PT1-EXM'], dtype=object)